#include <iostream>
using namespace std;

// Definition for singly-linked list.
class ListNode {
public:
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (head == nullptr || head->next == nullptr)
            return head;
        
        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* temp = even; 
        
        while (even != nullptr && even->next != nullptr) {
            odd->next = odd->next->next; 
            even->next = even->next->next; 
            odd = odd->next;
            even = even->next; 
        }
        odd->next = temp; 
        return head;
    }
};

void printList(ListNode* head) {
    while (head) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}
ListNode* createList(const vector<int>& values) {
    if (values.empty()) return nullptr;
    
    ListNode* head = new ListNode(values[0]);
    ListNode* current = head;
    for (int i = 1; i < values.size(); ++i) {
        current->next = new ListNode(values[i]);
        current = current->next;
    }
    return head;
}
int main() {
    Solution sol;
    vector<int> values1 = {1, 2, 3, 4, 5};
    ListNode* head1 = createList(values1);
    ListNode* result1 = sol.oddEvenList(head1);
    cout << "Odd-Even list for values1: ";
    printList(result1);
    vector<int> values2 = {2, 1, 3, 5, 6, 4, 7};
    ListNode* head2 = createList(values2);
    ListNode* result2 = sol.oddEvenList(head2);
    cout << "Odd-Even list for values2: ";
    printList(result2);

    return 0;
}
